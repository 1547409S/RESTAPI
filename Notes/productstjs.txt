const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');


const Product = require('../models/product');

//Handle incoming requests on products
router.get('/', (req, res, next) => {
    Product.find()
    .select('name price _id')
    .exec()
    .then(docs => {
        const response = {
            count: docs.length,
            products: docs.map( doc =>{
                return {
                    name: doc.name,
                    price: doc.price,
                    _id: doc._id,
                    request: {
                        type: 'GET',
                        url: 'http://localhost:3000/products/' + doc._id
                    }
                }
            })
        };
        console.log(docs);
        res.status(200).json(response);
    })
    .catch(err => {
        console.log(err);
        res.status(500).json({
            error: err
        });
    });
});

router.post('/', (req, res, next) => {
    // const product = {
    //     name: req.body.name,
    //     price: req.body.price
    // };
    const product = new Product({
        _id: new mongoose.Types.ObjectId(),
        name: req.body.name,
        price: req.body.price
    });
    console.log(req.body.name + ': ' + req.body.price);
    // saves the data into MongoDB and returns the result
    product
    .save()
    .then(result => {
        console.log(result);
        res.status(200).json({
            message: 'Created product successfully',
            createdProduct: {
                name: result.name,
                price: result.price,
                _id: result._id,
                request: {
                    type: 'GET',
                    url: 'http://localhost:3000/products/' + result._id
                }
            }
        });
    })
    .catch(err => console.log(err => {
        console.log(err);
        res.status(500).json({
            error: err
        });
    }));

    
});

// router.post("/", (req, res, next) => {
//     const product = new Product({
//       _id: new mongoose.Types.ObjectId(),
//       name: req.body.name,
//       price: req.body.price
//     });
//     product
//       .save()
//       .then(result => {
//         console.log(result);
//         res.status(201).json({
//           message: "Created product successfully",
//         //   createdProduct: {
//         //       name: result.name,
//         //       price: result.price,
//         //       _id: result._id,
//         //       request: {
//         //           type: 'GET',
//         //           url: "http://localhost:3000/products/" + result._id
//         //       }
//         //   }
//         });
//       })
//       .catch(err => {
//         console.log(err);
//         res.status(500).json({
//           error: err
//         });
//       });
//   });

router.get('/:productId', (req, res, next) => {
    const id = req.params.productId;
    console.log(id);
    Product.findById(id)
    //.select('-__v')
    .exec()
    .then(doc => {
        console.log("From MongoDB", doc);
        if (doc) {
            res.status(200).json({
                _id: doc._id,
                name: doc.name,
                price: doc.price,
                request: {
                    type: 'GET',
                    description: 'GET_ALL_PRODUCTS',
                    url: 'http://localhost/products'
                }
            });
        } else {
            res.status(404).json({message: 'No record found for this ID'});
        }
        
    })
    .catch(err => console.log(err));
    
});

router.patch('/:productId', (req, res, next) => {
    const id = req.params.productId;
    const updateOps = {};
    for (const ops of req.body) {
        updateOps[ops.propName] = ops.value;
    }

    Product.updateMany({_id: id}, {$set: updateOps})
    .exec()
    .then(result => {
        console.log(result);
        res.status(200).json(result);
    })
    .catch(err => {
        console.log(err);
        res.status(500).json({
            error: err
        });
    });
    // res.status(200).json({  
    //     message: 'Updated product',
    //     id: id
    // });
  //Not using return because no code after this statement. 
  //Only this request will be executed on PATCH  
});

router.delete('/:productId', (req, res, next) => {
    const id = req.params.productId;
    Product.remove({_id: id})
    .exec()
    .then(result => {
        res.status(200).json(result);
    })
    .catch(err => {
        console.log(err);
        res.status(500).json({
            error: err
        });
    });
    });


module.exports = router;